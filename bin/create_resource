#!/usr/bin/env ruby
BIN_DIR = File.dirname(File.symlink?(__FILE__) ? File.readlink(__FILE__) : __FILE__)
TOP_DIR = File.join(BIN_DIR, '..')
$: << File.join(TOP_DIR, 'lib')

DESCR = %{
Send a create message to a specific resource (topic) and print out any replies.

The type of the resource, a configuration file and a json file are required as input.
}

begin; require 'json/jwt'; rescue Exception; end

require 'omf_common'

$debug = false

opts = {
  communication: {
    #url: 'xmpp://srv.mytestbed.net'
  },
  eventloop: { type: :em},
  logging: {
    level: 'info'
  }
}

resource_url = nil
resource_type = :node
resource_properties = nil
op_mode = :development
@authorization = false
@entity = nil
@trusted_roots = nil

op = OptionParser.new
op.banner = "Usage: #{op.program_name} --conf CONF_FILE --in INPUT_FILE...\n#{DESCR}\n"
op.on '-t', '--resource_type TYPE', "Resource type (node, channel, etc)" do |type|
  resource_type = type.to_sym
end
op.on '-c', '--conf FILE', "Configuration file with communication info" do |file|
  require 'yaml'
  if File.exists?(file)
    @y = YAML.load_file(file)
  else
    error "No such file: #{file}"
    exit
  end

  if x = @y[:xmpp]
    resource_url = x[:topic]
    opts[:communication][:url] = "xmpp://#{x[:username]}:#{x[:password]}@#{x[:server]}"
    op_mode = x[:op_mode]
  end

  if a = @y[:auth]
    @authorization = true
    opts[:communication][:auth] = {}
    entity_cert = File.expand_path(a[:entity_cert])#'~/.omf/user_cert.pem'
    if File.exist?(entity_cert)
      @entity = OmfCommon::Auth::Certificate.create_from_pem(File.read(entity_cert))
      @trusted_roots = File.expand_path(a[:root_cert_dir]) #'~/.omf/trusted_roots'
    end
  else
    warn "authorization is disabled."
  end
end
op.on '-i', '--in FILE', "Input file containing properties" do |file|
  if File.exists?(file)
    file = File.expand_path(file)
  else
    error "No such file: #{file}"
    exit
  end
  require 'json'
  resource_properties = JSON.parse(File.read(file))
end
op.on '-d', '--debug', "Set log level to DEBUG" do
  opts[:logging][:level] = 'debug'
  $debug = true
end
op.on_tail('-h', "--help", "Show this message") { $stderr.puts op; exit }
rest = op.parse(ARGV) || []

unless resource_url || resource_properties || resource_type
  $stderr.puts 'Missing input file(s).'
  $stderr.puts op
  exit(-1)
end

def print_message(msg, resource)
  puts "#{resource}   <#{msg.type}(#{msg.itype})>    #{$debug ? msg.inspect : ''}"
  if msg.itype == 'WARN'
    puts "    #{msg.inspect}"
  end
  msg.each_property do |name, value|
    puts "    #{name}: #{value}"
  end
  puts "------"
end

def authorization?
  @authorization
end

OmfCommon.init(op_mode, opts) do |el|
  OmfCommon.comm.on_connected do |comm|
    if authorization?
      OmfCommon::Auth::CertificateStore.instance.register_default_certs(@trusted_roots)
      @entity.resource_id = OmfCommon.comm.local_topic.address
      OmfCommon::Auth::CertificateStore.instance.register(@entity)
    end
    comm.subscribe(resource_url) do |ptopic|
      if resource_properties.class == Hash
        uid = resource_properties[:uid] ||= SecureRandom.uuid # uuid of newly created object
        # Already subscribe to the new object's topic to avoid missing
        # any initial messages

        comm.subscribe(uid) do |ctopic|
          ctopic.on_message do |msg|
            print_message(msg, 'NEW')
          end

          ptopic.create(resource_type, resource_properties) do |msg|
            print_message(msg, resource_url)
            puts 'done.'
            comm.disconnect
          end
        end
      elsif resource_properties.class == Array
        resource_properties.each do |res|
          wait = true
          uid = res[:uid] ||= SecureRandom.uuid # uuid of newly created object
          # Already subscribe to the new object's topic to avoid missing
          # any initial messages

          comm.subscribe(uid) do |ctopic|
            ctopic.on_message do |msg|
              print_message(msg, 'NEW')
            end

            ptopic.create(resource_type, res) do |msg|
              print_message(msg, resource_url)
              wait = false
            end
          end
          sleep 1 while wait
        end
        puts 'done.'
        comm.disconnect
      else
        puts "Error: resource_properties is of type '#{resource_properties.class}', only types: 'Array' and 'Hash' are permitted."
        comm.disconnect
      end
    end
  end
end
